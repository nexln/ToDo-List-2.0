{"version":3,"sources":["serviceWorker.ts","api/todoListAPI.ts","utils/error-utils.ts","api/authAPI.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistList/todolists-reducer.ts","features/TodolistList/task-reducer.ts","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistList.tsx","app/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","authAPI","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","RemoveTodoListAC","index","findIndex","tl","todoListID","splice","AddTodoListAC","push","todolist","filter","entityStatus","ChangeTodolistTitleAC","ChangeTodoListFilterAC","setTodoListsAC","todoLists","map","changeTodoListEntityStatusAC","todoListsReducer","RemoveTaskAC","tasks","toDoListID","t","addTaskAC","task","todoListId","unshift","updateTaskAC","setTasksAC","changeTaskEntityStatusAC","entityTaskStatus","extraReducers","builder","addCase","forEach","taskReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Alert","props","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","onChange","handleChange","Button","AddItemForm","React","memo","useState","setTitle","setError","addItem","trimmedTitle","trim","size","e","currentTarget","onKeyPress","charCode","helperText","disabled","IconButton","onClick","padding","AddBox","EditableSpan","editMode","setEditMode","deactivatedEditMode","changeValue","onBlur","autoFocus","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","changeFilter","_addTask","removeToDoList","_changeToDoListTitle","useEffect","items","addTask","deleteTodo","changeToDoListTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","TodolistsList","addTaskTC","changeStatus","changeTitle","addToDoList","addTodolistTC","spacing","allTodolistTasks","Paper","AppWithRedux","finally","position","top","textAlign","width","CircularProgress","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.637013ff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '573fcfe3-3f34-4bad-8dc8-09913b47ae0c'\r\n  }\r\n}\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>('todo-lists');\r\n\r\n  },\r\n  createTodolist(title: string) {\r\n\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n\r\n  },\r\n  deleteTodolist(id: string) {\r\n    const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    return promise;\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  createTask(todolistId: string, taskTitile: string) {\r\n    return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  }\r\n}","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todoListAPI';\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC({error: data.messages[0]}))\r\n  } else {\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n  dispatch(setAppErrorAC({error: error.message}))\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n// type ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {instance, ResponseType} from \"./todoListAPI\";\r\n\r\n\r\nexport type MineData = {\r\n  id: number,\r\n  email: string,\r\n  login: string\r\n}\r\nexport type AuthLoginType = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: AuthLoginType) {\r\n    return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<MineData>>('auth/me')\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType>('auth/login')\r\n  }\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AuthLoginType, authAPI} from \"../../api/authAPI\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n      state.isLoggedIn = action.payload.value\r\n    }\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: false}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}","import {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as null | string,\r\n  isInitialized: false as boolean\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n      state.status = action.payload.status\r\n    },\r\n    setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n      state.error = action.payload.error\r\n    },\r\n    setIsInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n      state.isInitialized = action.payload.isInitialized\r\n    }\r\n  }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC} = slice.actions\r\nexport const {setAppErrorAC} = slice.actions\r\nexport const {setIsInitializedAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n    .finally(() => {\r\n      dispatch(setIsInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n","import {FilterValuesType} from \"../../app/AppWithRedux\";\r\nimport {todolistsAPI, TodolistType} from \"../../api/todoListAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: Array<TodolistsDomainType> = []\r\n\r\nconst slice = createSlice({\r\n  name: 'todolist',\r\n  initialState: initialState,\r\n  reducers: {\r\n    RemoveTodoListAC: (state, action: PayloadAction<{ todoListID: string }>) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n      if (index > -1) {\r\n        state.splice(index, 1)\r\n      }\r\n    },\r\n    AddTodoListAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n      state.push({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n    },\r\n    ChangeTodolistTitleAC: (state, action: PayloadAction<{ todoListID: string, value: string }>) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n      state[index].title = action.payload.value\r\n    },\r\n    ChangeTodoListFilterAC: (state, action: PayloadAction<{ todoListID: string, filter: FilterValuesType }>) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n      state[index].filter = action.payload.filter\r\n    },\r\n    setTodoListsAC: (state, action: PayloadAction<{ todoLists: Array<TodolistType> }>) => {\r\n      return action.payload.todoLists.map(tl => ({\r\n        ...tl,\r\n        filter: 'all',\r\n        entityStatus: 'idle'\r\n      }))\r\n    },\r\n    changeTodoListEntityStatusAC: (state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].entityStatus = action.payload.entityStatus\r\n    },\r\n\r\n  }\r\n})\r\n\r\nexport type TodolistsDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todoListsReducer = slice.reducer\r\nexport const {\r\n  RemoveTodoListAC,\r\n  AddTodoListAC,\r\n  ChangeTodolistTitleAC,\r\n  ChangeTodoListFilterAC,\r\n  setTodoListsAC,\r\n  changeTodoListEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        dispatch(setTodoListsAC({todoLists: res.data}))\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.createTodolist(title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        const task = res.data.data.item\r\n        const action = AddTodoListAC({todolist: task})\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const removeTodolistTC = (todoListID: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  dispatch(changeTodoListEntityStatusAC({id: todoListID, entityStatus: 'loading'}))\r\n  todolistsAPI.deleteTodolist(todoListID)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        const action = RemoveTodoListAC({todoListID: todoListID})\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updateTodolistTC = (todoListID: string, value: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.updateTodolist(todoListID, value)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        const action = ChangeTodolistTitleAC({todoListID: todoListID, value: value})\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todoListAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AddTodoListAC, setTodoListsAC, RemoveTodoListAC} from \"./todolists-reducer\";\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\n\r\nlet initialState: TaskStateType = {}\r\nexport type TaskDomainType = TaskType & {\r\n  entityTaskStatus: RequestStatusType\r\n}\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'task',\r\n  initialState: initialState,\r\n  reducers: {\r\n    RemoveTaskAC: (state, action: PayloadAction<{ taskId: string, toDoListID: string }>) => {\r\n      const tasks = state[action.payload.toDoListID]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks.splice(index, 1)\r\n      }\r\n    },\r\n    addTaskAC: (state, action: PayloadAction<{ task: TaskDomainType }>) => {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task)\r\n    },\r\n    updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks[index] = {...tasks[index], ...action.payload.model}\r\n      }\r\n    },\r\n    setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskDomainType>, todolistId: string }>) => {\r\n      state[action.payload.todolistId] = action.payload.tasks\r\n    },\r\n    changeTaskEntityStatusAC: (state, action: PayloadAction<{ taskId: string, todolistId: string, entityTaskStatus: RequestStatusType }>) => {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks[index].entityTaskStatus = action.payload.entityTaskStatus\r\n      }\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(AddTodoListAC, (state, action) => {\r\n      state[action.payload.todolist.id] = []\r\n    })\r\n    builder.addCase(RemoveTodoListAC, (state, action) => {\r\n      delete state[action.payload.todoListID]\r\n    })\r\n    builder.addCase(setTodoListsAC, (state, action) => {\r\n      action.payload.todoLists.forEach((tl) => {\r\n        state[tl.id] = []\r\n      })\r\n    })\r\n  }\r\n})\r\n\r\nexport const taskReducer = slice.reducer\r\nexport const {RemoveTaskAC, addTaskAC, updateTaskAC, setTasksAC, changeTaskEntityStatusAC} = slice.actions\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n      .then((res) => {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        const tasks = res.data.items.map(t => ({\r\n          ...t,\r\n          entityTaskStatus: 'idle' as RequestStatusType\r\n        }))\r\n        const action = setTasksAC({tasks: tasks, todolistId: todolistId})\r\n        dispatch(action)\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  dispatch(changeTaskEntityStatusAC({taskId: taskId, todolistId: todolistId, entityTaskStatus: 'loading'}))\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(setAppStatusAC({status: 'succeeded'}))\r\n          const action = RemoveTaskAC({taskId: taskId, toDoListID: todolistId})\r\n          dispatch(action)\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n        }\r\n      }\r\n    )\r\n    .catch(error => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = {...res.data.data.item, entityTaskStatus: 'idle' as RequestStatusType}\r\n        dispatch(addTaskAC({task: task}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      console.warn('task not found in the tests')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(setAppStatusAC({status: 'succeeded'}))\r\n          const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\r\n          dispatch(action)\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n        }\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n","import {todoListsReducer} from '../features/TodolistList/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport {taskReducer} from \"../features/TodolistList/task-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setAppErrorAC({error: null}))\r\n  }\r\n\r\n  return (\r\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from './auth-reducer';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length <= 2) {\r\n        errors.password = 'Too short password'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      formik.resetForm()\r\n      dispatch(loginTC(values))\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'}/>\r\n  }\r\n\r\n\r\n  return <Grid container justify=\"center\">\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'}\r\n                 rel=\"noreferrer\"\r\n              >here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('email')}\r\n\r\n            />\r\n            {\r\n              formik.touched.email && formik.errors.email\r\n                ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null\r\n            }\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {\r\n              formik.touched.password && formik.errors.password\r\n                ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null\r\n            }\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox\r\n                name='rememberMe'\r\n                onChange={formik.handleChange}\r\n                value={formik.values.rememberMe}\r\n              />}\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const addItem = () => {\r\n        let trimmedTitle = title.trim();\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(trimmedTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    };\r\n    const onKeyPressHandler = ({charCode}: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (charCode === 13) {\r\n            addItem();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={'Title'}\r\n                helperText={error}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                size={\"small\"}\r\n                onClick={addItem}\r\n                style={{padding: '1px'}}\r\n                disabled={props.entityStatus === 'loading'}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeValue: (newValue: string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n\r\n    let [title, setTitle] = useState(props.title);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const deactivatedEditMode = () => {\r\n        setEditMode(false);\r\n        props.changeValue(title)\r\n    };\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const onKeyPressHandler = ({charCode}: KeyboardEvent<HTMLInputElement>) => {\r\n        if (charCode === 13) {\r\n            deactivatedEditMode();\r\n        }\r\n    };\r\n    return (\r\n        editMode\r\n            ? <TextField size={'small'}\r\n                         variant={'outlined'}\r\n                         value={title}\r\n                         onBlur={deactivatedEditMode}\r\n                         onKeyPress={onKeyPressHandler}\r\n                         autoFocus={true}\r\n                         onChange={onChangeTitle}/>\r\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\r\n    );\r\n};","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses} from '../../../../api/todoListAPI'\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\nimport {TaskDomainType} from \"../../task-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n  task: TaskDomainType\r\n  todolistId: string\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  entityStatus?: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const onClickHandler = useCallback(() => {\r\n    props.removeTask(props.task.id, props.todolistId)\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  const onTitleChangeHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n\r\n  return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n    <Checkbox\r\n      checked={props.task.status === TaskStatuses.Completed}\r\n      color=\"primary\"\r\n      onChange={onChangeHandler}\r\n      disabled={props.entityStatus === 'loading' || props.task.entityTaskStatus === 'loading'}\r\n    />\r\n\r\n    <EditableSpan title={props.task.title} changeValue={onTitleChangeHandler}/>\r\n    <IconButton onClick={onClickHandler} disabled={props.entityStatus === 'loading' || props.task.entityTaskStatus === 'loading'}>\r\n      <Delete/>\r\n    </IconButton>\r\n  </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {FilterValuesType} from \"../../../app/AppWithRedux\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC, TaskDomainType} from \"../task-reducer\";\r\nimport {TaskStatuses} from \"../../../api/todoListAPI\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (taskId: string, toDoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, toDoListID: string) => void\r\n    _addTask: (title: string, toDoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, toDoListID: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDoListID: string) => void\r\n    _changeToDoListTitle: (title: string, toDoListID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo(({\r\n                                                             id,\r\n                                                             title,\r\n                                                             tasks,\r\n                                                             removeTask,\r\n                                                             changeFilter,\r\n                                                             _addTask,\r\n                                                             changeTaskStatus,\r\n                                                             filter,\r\n                                                             removeToDoList,\r\n                                                             changeTaskTitle,\r\n                                                             _changeToDoListTitle,\r\n  entityStatus\r\n                                                         }) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [dispatch, id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        _addTask(title, id)\r\n    }, [_addTask, id])\r\n\r\n    const deleteTodo = useCallback(() => {\r\n        removeToDoList(id)\r\n    }, [removeToDoList, id]);\r\n\r\n    const changeToDoListTitle = useCallback((newValue: string) => {\r\n        _changeToDoListTitle(newValue, id)\r\n    }, [_changeToDoListTitle, id])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id]);\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id]);\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id]);\r\n\r\n\r\n    let tasksForTodoList = tasks\r\n    if (filter === 'active') {\r\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={title} changeValue={changeToDoListTitle}/>\r\n            <IconButton onClick={deleteTodo} disabled={entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodoList.map(t => <Task key={t.id} task={t} todolistId={id}\r\n                                                removeTask={removeTask}\r\n                                                changeTaskTitle={changeTaskTitle}\r\n                                                changeTaskStatus={changeTaskStatus}\r\n                                                entityStatus={entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button\r\n                size={'small'}\r\n                variant={filter === 'all' ? \"contained\" : \"outlined\"}\r\n                color={'default'}\r\n                onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={filter === 'active' ? \"contained\" : \"outlined\"}\r\n                color={'primary'}\r\n                onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={filter === 'completed' ? \"contained\" : \"outlined\"}\r\n                color={'secondary'}\r\n                onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {\r\n  addTodolistTC,\r\n  ChangeTodoListFilterAC,\r\n  fetchTodolistsTC,\r\n  removeTodolistTC,\r\n  TodolistsDomainType, updateTodolistTC\r\n} from \"./todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {FilterValuesType} from \"../../app/AppWithRedux\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./task-reducer\";\r\nimport {TaskStatuses} from \"../../api/todoListAPI\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList = React.memo(() => {\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  let todoLists = useSelector<AppRootStateType, Array<TodolistsDomainType>>(state => state.todoLists)\r\n  let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return;\r\n    }\r\n    dispatch(fetchTodolistsTC())\r\n  }, [dispatch, isLoggedIn])\r\n\r\n  const removeTask = useCallback((id: string, toDoListID: string) => {\r\n    dispatch(removeTaskTC(id, toDoListID))\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback((title: string, toDoListID: string) => {\r\n    dispatch(addTaskTC(title, toDoListID))\r\n  }, [dispatch])\r\n\r\n  const changeStatus = useCallback((taskId: string, status: TaskStatuses, toDoListID: string) => {\r\n    const thunk = updateTaskTC(taskId, {status}, toDoListID)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const changeTitle = useCallback((taskId: string, title: string, toDoListID: string) => {\r\n    const thunk = updateTaskTC(taskId, {title: title}, toDoListID)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const removeToDoList = useCallback((toDoListID: string) => {\r\n    const thunk = removeTodolistTC(toDoListID)\r\n    dispatch(thunk)\r\n  }, [dispatch]);\r\n\r\n\r\n  const changeFilter = useCallback((value: FilterValuesType, toDoListID: string) => {\r\n    const action = ChangeTodoListFilterAC({todoListID: toDoListID, filter: value})\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeToDoListTitle = useCallback((title: string, toDoListID: string) => {\r\n    const thunk = updateTodolistTC(toDoListID, title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const addToDoList = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"}/>\r\n  }\r\n\r\n  return <>\r\n    <Grid container style={{padding: \"20px\"}}>\r\n      <AddItemForm addItem={addToDoList}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todoLists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n          return (\r\n            <Grid item key={tl.id}>\r\n              <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                  key={tl.id}\r\n                  id={tl.id}\r\n                  title={tl.title}\r\n                  entityStatus={tl.entityStatus}\r\n                  tasks={allTodolistTasks}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  _addTask={addTask}\r\n                  changeTaskStatus={changeStatus}\r\n                  filter={tl.filter}\r\n                  removeToDoList={removeToDoList}\r\n                  changeTaskTitle={changeTitle}\r\n                  _changeToDoListTitle={changeToDoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n})\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n  AppBar, CircularProgress,\r\n  Container,\r\n  IconButton,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {TodolistsList} from \"../features/TodolistList/TodolistList\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport function AppWithRedux() {\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  let dispatch = useDispatch()\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [dispatch])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n  const logout = () => {\r\n    dispatch(logoutTC())\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          {isLoggedIn && <Button color={\"inherit\"} onClick={logout}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Switch>\r\n          <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n          <Route path={'/login'} render={() => <Login/>}/>\r\n          <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n          <Redirect from={'*'} to={'/404'}/>\r\n        </Switch>\r\n      </Container>\r\n      <ErrorSnackbar/>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {AppWithRedux} from \"./app/AppWithRedux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <AppWithRedux/>\r\n      </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}